Angular

First Part

Découvrez le framework Angular

En bref, Angular est un framework JavaScript qui vous permet de développer des applications "efficaces et sophistiquées", comme dit la documentation. Il permet notamment de créer ce qu'on appelle des Single Page Applications (ou SPA) : des applications entières qui tournent dans une seule page HTML grâce au JavaScript.

Dev angulaire faire participer trois langages comme: HTML SCSS ET TYPESCRIPT

Angular est un framework complet, on peut créer des applications web complètes sans avoir besoin de librairies tierces supplémentaires.

* Les best practices (les bonnes pratiques) Angular sont extrêmement précises – les structures des applications Angular ont tendance à se ressembler fortement, donc il est facile de passer d'un projet à un autre, et de s'assurer que son propre projet suit les meilleurs pratiques. 
* Le framework a été conçu pour fonctionner avec le TypeScript – il est tout à fait possible d'utiliser le TypeScript pour React, Vue ou Svelte, mais Angular a été conçu pour ce langage, donc son intégration est forcément plus profonde. 

RESUME
* Le framework Angular utilise le HTML, le SCSS et le TypeScript. 
* Le TypeScript est un langage qui ajoute des syntaxes au JavaScript, notamment pour le typage strict. 

————————————————————

Installez les dépendances

Il vous faudra quelques outils indispensables pour du développement Angular en toute tranquillité comme NPM, NODE et après installer le CLI angular
npm i -g @angular/cli
After installation
Ng v


Angular fonctionne sur tous les navigateurs modernes.

En résumé

* Pour installer le CLI d'Angular, il vous faut une version LTS de Node et npm. 
* On installe le CLI avec la commande  npm i -g @angular/cli 
* On peut vérifier la version installée du CLI avec  ng v 
———————————————————

Construisez une application Angular avec le CLI


Depuis une ligne de commande, naviguez dans le dossier où vous souhaitez créer votre projet Angular, et exécutez la commande suivante :
ng new snapface --style=scss --skip-tests=true

La commande  ng new  génère une nouvelle application Angular, installe les dépendances du projet, et initialise un dépôt Git. Le flag  --style=scss  dit au CLI que vous souhaitez utiliser le SCSS pour les styles (plutôt que le CSS ou le LESS, par exemple), et le flag  --skip-tests=true  dit que vous ne voulez pas générer de fichiers de tests unitaires pour ce projet.

Pour lancer l’app on n’a cette commande:
 ng serve

Port: 4200

En résumé

* Une nouvelle application Angular se crée avec  ng new 
* ng serve  exécute le serveur de développement. 
* La balise  <app-root>  correspond à AppComponent. 

Second Part

Construire votre premier component

Le mot component en anglais signifie "composant", et à juste titre : les components sont les composants de base d'une application Angular.

Il n'y a pas de règle d'or dans le découpage d'une application en components : on essaie d'équilibrer entre ne pas avoir un trop grand nombre de components, et avoir quand même des components simples et pas trop gros.


Le CLI d'Angular propose des commandes de création pour faciliter le développement, et vous allez en utiliser une maintenant, depuis une ligne de commande dans le dossier du projet :

ng generate component face-snap

Un décorateur en TypeScript permet, entre autres, d'apporter des modifications à une classe. Ici, le décorateur  @Component  vient ajouter tous les comportements nécessaires à l'utilisation de ce component dans l'application. Il est importé depuis le package  @angular/core

En résumé

* Une application Angular peut être vue comme une arborescence de components. 
* Un component lie un template HTML et des styles SCSS à du comportement TS. 
* Pour créer un component, on utilise la commande  ng generate component nom-du-component 
* Le sélecteur d'un component correspond à la balise HTML personnalisée qu'on utilisera pour l'insérer dans l'application.

————————————————


Affichez des données

En Angular, il y a deux façons principales d'exploiter une donnée venant du TypeScript dans le template : la string interpolation et la liaison par attribut, ou attribute binding. Mais pour afficher des données, il faut d'abord des données !
`
Comme vous pouvez le constater, on crée un attribut de classe en associant le nom de l'attribut à son type.

Pour initialiser ces propriétés en suivant les best practices Angular, vous allez utiliser la méthode  ngOnInit()  (que vous aviez supprimée précédemment). Pour l'utiliser, votre component doit implémenter l'interface  OnInit

La méthode  ngOnInit()  est appelée automatiquement par Angular au moment de la création de chaque instance du component. Elle permet notamment d'initialiser des propriétés.

La string interpolation est la méthode la plus simple pour afficher le contenu d'une variable dans le template. Il suffit de mettre le nom de la variable à afficher entre doubles accolades {{ }} dans le HTML .


En résumé

* On déclare les propriétés d'un component en haut de sa classe, et on les initialise dans la méthode  ngOnInit() 
* La méthode  ngOnInit()  est appelée une fois par instance de component au moment de la création de cette instance. 
* La string interpolation avec les doubles accolades  {{ }}  permet d'insérer la valeur d'une propriété TypeScript dans le template. 
* L'attribute binding permet de lier la valeur d'une propriété TypeScript à un attribut HTML, en mettant l'attribut entre crochets  []  et en passant le nom de la propriété. 

——————————————————————

Réagissez aux événements

Le nom de méthode qui commence par on signale que cette méthode répond à un événement.
Il faut maintenant lier cette méthode au clic sur le bouton avec la liaison par événement, ou event binding. Là où vous avez utilisé des crochets pour lier aux attributs, vous allez utiliser des parenthèses  ()  pour lier aux événements :

<button (click)="onAddSnap()">Oh Snap!</button>

Prenons quelques instants pour noter que chaque instance d'un component est totalement indépendante. 

En résumé

* Pour lier une méthode à un événement d'un élément du template, mettez l'événement entre parenthèses  ()  et passez la méthode en argument ; ex. : (click)="onClickButton()" 


——————————————————————

Ajoutez des propriétés personnalisées


 Angular vous permet d'ajouter des propriétés personnalisées à vos components de manière à ce que vous puissiez les injecter depuis le component parent.


Pour qu'une propriété puisse être injectée depuis l'extérieur d'un component, il faut lui ajouter le décorateur  @Input(). Créez maintenant une propriété  faceSnap  de type  FaceSnap  (votre nouveau type !) et mettez-lui ce décorateur :

@Input() faceSnap!: FaceSnap;


Input  doit être ajouté aux imports depuis  @angular/core  !

Vous allez maintenant utiliser l'attribute binding pour lier cet objet à la propriété personnalisée  faceSnap  de FaceSnapComponent dans  app.component.html  :

<app-face-snap [faceSnap]="mySnap"></app-face-snap>


Comme vous pouvez le remarquer, la nouvelle propriété  faceSnap  est utilisée comme toute autre propriété.


En résumé

* N'hésitez pas à créer vos propres types, sous forme de classe par exemple, pour faciliter la manipulation de données dans votre application. 
* Une propriété personnalisée est rendue injectable depuis l'extérieur grâce au décorateur  @Input() 
* Une propriété en  @Input()  est utilisable comme n'importe quelle autre propriété : on peut en afficher les éléments, les modifier…  
* On lie ensuite une valeur à cette propriété depuis le component parent avec l'attribute binding, c'est-à-dire le nom de la propriété entre crochets  []  en passant la valeur entre les guillemets ; ex. : [faceSnap]="mySnap".  



Thirst Part

Conditionner l’affichage des éléments

Une directive est une classe qui vient ajouter du comportement à l'élément sur lequel elle est posée. L'astérisque au début du nom  *ngIf  nous montre qu'il s'agit d'une directive structurelle, qui viendra donc toucher à la structure du document.

On passe à  *ngIf  la condition selon laquelle l'élément doit être ajouté. Ici, Angular évalue  faceSnap.location  comme étant "truthy" quand la propriété existe et qu'elle ne contient pas la chaîne vide (ou les valeurs  null,  false, ou  0, mais il s'agit ici d'une string). Elle est évaluée comme étant "falsey" quand la propriété retourne undefined, c'est-à-dire quand elle n'existe pas.


pour afficher uniquement les photos prises à Paris. On peut même mettre la directive  *ngIf  sur des components. Dans  app.component.html, on pourrait imaginer un filtre pour montrer uniquement les FaceSnaps ayant plus de 5  snaps  :

<app-face-snap [faceSnap]="mySnap" *ngIf="mySnap.snaps > 5"></app-face-snap>

<app-face-snap [faceSnap]="myOtherSnap" *ngIf="myOtherSnap.snaps > 5"></app-face-snap>

<app-face-snap [faceSnap]="myLastSnap" *ngIf="myLastSnap.snaps > 5"></app-face-snap>


En résumé

* Vous pouvez ajouter des propriétés optionnelles à une classe en y ajoutant un point d'interrogation  ? 
* Ajouter la directive  *ngIf  à un élément (qui peut aussi être un component) dit à Angular d'ajouter ou non cet élément au DOM selon la condition que vous lui passez, par exemple  <p *ngIf="size === 'large'"> 
—————————————————————
Afficher des listes

Dans une application web dynamique, il n'est généralement pas possible de prévoir en avance le nombre d'éléments qu'il y aura dans une liste de données retournée par le serveur. Il va souvent vous les renvoyer sous forme de tableau (ou Array, en anglais), et ce sera à vous d'arriver à afficher la liste en entier, qu'il y ait un élément ou mille ! Vous devrez donc itérer sur un tableau pour y arriver, et c'est là où intervient la directive*ngFor.


‘ng’ est un préfixe commun utilisé dans les commandes de la ligne de commande pour les projets Angular. Il est souvent utilisé pour exécuter diverses tâches de développement telles que la création de composants, de services, de modules, de directives, de pipes, etc. Il s'agit d'une abréviation de "Angular" et est utilisé pour désigner les outils de la ligne de commande d'Angular.
En utilisant les outils de ligne de commande ‘ng’, les développeurs peuvent automatiser et simplifier certaines tâches courantes de développement telles que la génération de code et la gestion des dépendances. Les commandes ‘ng’ sont souvent utilisées dans des environnements de développement tels que le terminal de commandes, le shell, ou les scripts de construction automatisés.
Par exemple, ‘ng’ serve lance un serveur de développement pour l'application Angular, ng generate component génère un nouveau composant Angular, ng build compile l'application pour la production, etc.


Au lieu d'avoir trois variables de type  FaceSnap  dans votre AppComponent, vous allez créer une seule variable qui contiendra un tableau de type  FaceSnap[]  et modifier votre  ngOnInit()


Maintenant, dans le template, au lieu d'insérer plusieurs instances de  <app-face-snap> , vous allez utiliser le code suivant :

<app-face-snap *ngFor="let faceSnap of faceSnaps" [faceSnap]="faceSnap"></app-face-snap>
Regardons de plus près ce qui se passe exactement avec cette syntaxe :
* la directive  *ngFor  fonctionne un peu comme une boucle  for...of  , c'est-à-dire que, dans ce cas de figure, elle va itérer sur le tableau  faceSnaps  et vous exposer l'élément correspondant à chaque itération sous l'alias  faceSnap 
* vous associez ensuite l'élément du tableau à la propriété  faceSnap  du component. 

Rien ne vous empêche d'utiliser des alias comme ça dans vos applications, mais on préférera généralement la version plus courte. Vous utiliserez très souvent  *ngFor, donc vous prendrez vite l'habitude !


En résumé

* La directive  *ngFor  vous permet d'insérer un élément dans le DOM pour chaque élément dans un tableau. 
* La syntaxe  let element of array  vous donne accès à l'élément de chaque itération, vous permettant de l'injecter dans un component, par exemple. 

——————————————————————
Ajoutez du style dynamique

La fonctionnalité que je vous propose d'ajouter maintenant est que plus un FaceSnap a de "snaps", plus le nombre de "snaps" sera coloré en vert. Pour ceci, vous allez utiliser la directive[ngStyle]

Je vous encourage à créer vos propres styles ici. Si jamais vous souhaitez continuer le cours sans le faire, je vous partage une idée. Vous pouvez remplacer le contenu de face-snap.component.scss


La directive  [ngStyle]  prendra comme argument un objet où :
* les clés sont les styles CSS à modifier ; 
* les valeurs sont les valeurs que doivent prendre ces styles. 

Pour utiliser directement le nombre de snaps comme valeur pour le vert de la couleur de texte, vous pouvez utiliser la fonction CSS  rgb()  :

<span [ngStyle]="{ color: 'rgb(0, ' + faceSnap.snaps + ', 0)' }">🤌 {{ faceSnap.snaps }}</span>

En résumé

* La directive  [ngStyle]  permet d'appliquer des styles qui dépendent de valeurs dynamiques, comme un texte qui, plus il y a de snaps, devient de plus en plus vert. 
* La directive  [ngStyle]  prend comme argument un objet où les clés correspondent aux styles CSS à modifier, et les valeurs aux valeurs que doivent prendre ces styles. 

————————————————————————————
Mettez de la classe
L'objectif de ce chapitre est de faire ressortir visuellement les FaceSnaps que l'utilisateur a "snapped". On pourra imaginer une classe snapped  qui viendra s'ajouter à la  <div class="face-snap-card">  pour modifier quelques couleurs, par exemple. On ajoute cette classe dans  face-snap.component.scss



Maintenant, il va falloir appliquer cette classe conditionnellement. Je vais vous expliquer le fonctionnement de la directive  [ngClass]  et vous laisser essayer d'implémenter la fonctionnalité recherchée.
[ngClass]  prend un objet en argument, comme  [ngStyle], mais dont le fonctionnement est différent :
* les clés sont les noms de classe CSS à appliquer ; 
* les valeurs sont les conditions qui doivent être remplies pour que les classes correspondantes s'appliquent. 
En gros :

<div [ngClass]="{ 'class-name': condition }"></div>

<div class="face-snap-card" [ngClass]="{ snapped: buttonText === 'Oops, unSnap!' }">


En résumé

* La directive  [ngClass]  permet d'ajouter dynamiquement des classes à des éléments HTML. 
* [ngClass]  prend un objet en argument où les clés sont des noms de classe CSS, et les valeurs sont les conditions selon lesquelles les classes doivent être appliquées. 



* Vous avez découvert les directives : des classes qui permettent d'ajouter des comportements à des éléments HTML, ou même à des components. 
* Vous avez implémenté des directives structurelles pour modifier la structure du document :
    * *ngIf  pour ajouter un élément ou non au DOM selon une condition donnée ; 
    * *ngFor  pour ajouter autant d'éléments au DOM qu'il y a d'éléments dans un tableau. 
* Vous avez utilisé des directives par attribut pour gérer dynamiquement les styles :
    * [ngStyle]  pour paramétrer des styles selon des valeurs venant du TypeScript ; 
    * [ngClass]  pour ajouter et retirer des classes CSS selon une condition donnée. 









